package cn.springcloud.meisw.jpa.conf.db;

import java.util.Properties;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.boot.jta.atomikos.AtomikosDataSourceBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.core.env.Environment;

@Configuration
public class DataSourceConfig {
	
	private static final Logger log = LoggerFactory.getLogger(DataSourceConfig.class);
	
	@Primary
	@Bean(name = "firstDataSource")
	@Qualifier("firstDataSource")
	@ConfigurationProperties(prefix = "spring.datasource.primary")
	public DataSource firstDataSource(Environment env) {
		log.info("{}", "primary db built");
		AtomikosDataSourceBean ds = new AtomikosDataSourceBean();
		Properties prop = build(env, "spring.datasource.primary.");
		ds.setXaDataSourceClassName("oracle.jdbc.xa.client.OracleXADataSource");;
		ds.setUniqueResourceName("primary");
		ds.setPoolSize(5);
		ds.setXaProperties(prop);
		// return DataSourceBuilder.create().build();
		return ds;
	}
	
	@Bean(name = "secondDataSource")
	@Qualifier("secondDataSource")
	@ConfigurationProperties(prefix = "spring.datasource.secondary")
	public DataSource secondaryDataSource(Environment env) {
		log.info("{}", "secondary db built");
//		return DataSourceBuilder.create().build();
		AtomikosDataSourceBean ds = new AtomikosDataSourceBean();
		Properties prop = build(env, "spring.datasource.secondary.");
		ds.setXaDataSourceClassName("oracle.jdbc.xa.client.OracleXADataSource");;
		ds.setUniqueResourceName("secondary");
		ds.setPoolSize(5);
		ds.setXaProperties(prop);
		return ds;
	}
	
	private Properties build(Environment env, String prefix) {
		Properties prop = new Properties();
		prop.put("URL", env.getProperty(prefix + "jdbc-url"));
		prop.put("username", env.getProperty(prefix + "username"));
		prop.put("password", env.getProperty(prefix + "password"));
//		prop.put("driverClassName", env.getProperty(prefix + "driver-class-name", ""));
		prop.put("driver-class-name", "oracle.jdbc.xa.client.OracleXADataSource");
		// prop.put("initialSize", env.getProperty(prefix + "initialSize", Integer.class));
		// prop.put("maxActive", env.getProperty(prefix + "maxActive", Integer.class));
		// prop.put("minIdle", env.getProperty(prefix + "minIdle", Integer.class));
		// prop.put("maxWait", env.getProperty(prefix + "maxWait", Integer.class));
		// prop.put("poolPreparedStatements", env.getProperty(prefix + "poolPreparedStatements", Boolean.class));
		//
		// prop.put("maxPoolPreparedStatementPerConnectionSize",
		// env.getProperty(prefix + "maxPoolPreparedStatementPerConnectionSize", Integer.class));
		//
		// prop.put("maxPoolPreparedStatementPerConnectionSize",
		// env.getProperty(prefix + "maxPoolPreparedStatementPerConnectionSize", Integer.class));
		// prop.put("validationQuery", env.getProperty(prefix + "validationQuery"));
		// prop.put("validationQueryTimeout", env.getProperty(prefix + "validationQueryTimeout", Integer.class));
		// prop.put("testOnBorrow", env.getProperty(prefix + "testOnBorrow", Boolean.class));
		// prop.put("testOnReturn", env.getProperty(prefix + "testOnReturn", Boolean.class));
		// prop.put("testWhileIdle", env.getProperty(prefix + "testWhileIdle", Boolean.class));
		// prop.put("timeBetweenEvictionRunsMillis", env.getProperty(prefix + "timeBetweenEvictionRunsMillis", Integer.class));
		// prop.put("minEvictableIdleTimeMillis", env.getProperty(prefix + "minEvictableIdleTimeMillis", Integer.class));
		// prop.put("filters", env.getProperty(prefix + "filters"));
		return prop;
	}
}
