app:
  eureka:
    host01: localhost
    port01: 8761
server:
  port: 24151
spring:
  application:
    name: meisw-oracle-jpa
#主数据源
  datasource:
#    url: jdbc:oracle:thin:@192.168.254.132:1521/orcl
#    username: wy
#    password: wy
#    driver-class-name: oracle.jdbc.driver.OracleDriver
    primary:
      jdbc-url: jdbc:oracle:thin:@192.168.254.132:1521/orcl
      username: wy
      password: wy
      driver-class-name: oracle.jdbc.driver.OracleDriver
    secondary:
      jdbc-url: jdbc:oracle:thin:@192.168.254.132:1521/orcl
      username: wangye
      password: wangye
      driver-class-name: oracle.jdbc.driver.OracleDriver
  jpa:
    hibernate:
      ddl-auto: update
      show-sql: true
      properties:
        hibernate:
          dialect: org.hibernate.dialect.Oracle10Dialect
#  cache:
#    type: CAFFEINE
#    cache-names:
#      - user
#    caffeine:
#      spec: 
#        maximunSize: 500
#        expireAfterWrite: 5s
#    ehcache:
#      config: classpath:conf/ehcache.xml
   
  cache:
    multi:
      caffeine:
        expireAfterAccess: 5000
      redis:
        defaultExpiration: 60000
    cache-names:
      - user
  redis:
    timeout: 10000
    password: 
    host: 127.0.0.1
    port: 6379
    pool:
      maxIdle: 10
      minIdle: 2
      maxActive: 10
      maxWait: 3000
       
      
#  redis:
#    database: 0
#    host: 127.0.0.1
#    port: 6379
#    password: 
#    pool.max-active: 200   #使用负值表示没有限制
#    pool.max-wait: -1
#    pool.max-idle: 10
#    pool.min-idle: 0
#    timeout: 1000
  thymeleaf:
    cache: true
    check-template-location: true
    content-type: text/html
    enabled: true
    encoding: utf-8
    mode: HTML5
    prefix: classpath:/templates/
    suffix: .html
    
#config: classpath: /echache.xml
#create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
#create-drop：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。
#update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。
#validate：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
eureka:
  instance:
    preferIpAddress: false
  client:
    register-with-eureka: false
    fetchRegistry: false
    server:
      waitTimeInMsWhenSyncEmpty: 0
    serviceUrl:
      defaultZone: http://${app.eureka.host01}:${app.eureka.port01}/eureka/
